from ipyleaflet import Map, DrawControl, basemaps, basemap_to_tiles
from ipywidgets import Dropdown, VBox, Output
import json

# üè∑Ô∏è Lista ampliada de categor√≠as
opciones_uso = [
    'Casa', 'Edificio', 'Rascacielos', 'Cl√∫ster Residencial', 'Fraccionamiento',
    'Conjunto Residencial', 'Parque', 'Parque Acu√°tico', '√Årea Verde', 'Jard√≠n Urbano',
    'Plaza Comercial', 'Espacio P√∫blico', 'Palacio', 'Ayuntamiento',
    'Edificio Hist√≥rico', 'Hospital', 'Escuela', 'Estadio', 'Templo',
    'Infraestructura Deportiva', 'Museo', 'Otro'
]

# Dropdown para seleccionar tipo
tipo = Dropdown(
    options=opciones_uso,
    value='Casa',
    description='Uso:',
    layout={'width': '350px'}
)

# Crear mapa con zoom m√°ximo
m = Map(center=(19.0422, -98.2772), zoom=19, min_zoom=1, max_zoom=22)

# A√±adir capa satelital de Esri
satellite = basemap_to_tiles(basemaps.Esri.WorldImagery)
labels = basemap_to_tiles(basemaps.Esri.WorldImageryClarity)
m.add_layer(satellite)
m.add_layer(labels)

# Control de dibujo
draw_control = DrawControl()
draw_control.polygon = {
    "shapeOptions": {
        "color": "#1f77b4",
        "fillColor": "#1f77b4",
        "fillOpacity": 0.5
    }
}
m.add_control(draw_control)

# Zona de salida
salida = Output()

# Guardar geometr√≠a con uso seleccionado
@draw_control.on_draw
def handle_draw(target, action, geo_json):
    geo_json['properties'] = {'uso': tipo.value}
    with open("clasificado.geojson", "a") as f:
        json.dump(geo_json, f)
        f.write(",\n")
    with salida:
        print(f"‚úÖ Guardado: {tipo.value}")

# Mostrar todo en el notebook
VBox([tipo, m, salida])
